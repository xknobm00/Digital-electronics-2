
05-segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d65  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000820  00000000  00000000  000010c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004c3  00000000  00000000  000018e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000108  00000000  00000000  00001da8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ab  00000000  00000000  00001eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000330  00000000  00000000  0000235b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  0000268b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__vector_13>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ef       	ldi	r30, 0xFC	; 252
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  8e:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    reg_name++;                     // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  96:	fc 01       	movw	r30, r24
  98:	40 81       	ld	r20, Z
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <GPIO_config_output+0xe>
  a0:	22 0f       	add	r18, r18
  a2:	33 1f       	adc	r19, r19
  a4:	6a 95       	dec	r22
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <GPIO_config_output+0xa>
  a8:	24 2b       	or	r18, r20
  aa:	20 83       	st	Z, r18
  ac:	08 95       	ret

000000ae <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  ae:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  b0:	90 81       	ld	r25, Z
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <GPIO_write_low+0xe>
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	6a 95       	dec	r22
  be:	e2 f7       	brpl	.-8      	; 0xb8 <GPIO_write_low+0xa>
  c0:	20 95       	com	r18
  c2:	29 23       	and	r18, r25
  c4:	20 83       	st	Z, r18
  c6:	08 95       	ret

000000c8 <GPIO_write_high>:
 * Function: GPIO_write_high()
 **********************************************************************/

void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name | (1<<pin_num);
  c8:	fc 01       	movw	r30, r24
  ca:	40 81       	ld	r20, Z
  cc:	21 e0       	ldi	r18, 0x01	; 1
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <GPIO_write_high+0xe>
  d2:	22 0f       	add	r18, r18
  d4:	33 1f       	adc	r19, r19
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <GPIO_write_high+0xa>
  da:	24 2b       	or	r18, r20
  dc:	20 83       	st	Z, r18
  de:	08 95       	ret

000000e0 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Configure SSD signals
    SEG_init();
  e0:	0e 94 81 00 	call	0x102	; 0x102 <SEG_init>

    // Test of SSD: display number '3' at position 0
    SEG_update_shift_regs(3, 0);
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	83 e0       	ldi	r24, 0x03	; 3
  e8:	0e 94 91 00 	call	0x122	; 0x122 <SEG_update_shift_regs>
  ec:	ff cf       	rjmp	.-2      	; 0xec <main+0xc>

000000ee <__vector_13>:
/**********************************************************************
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Increment decimal counter value and display it on SSD.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1
    // WRITE YOUR CODE HERE

  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <SEG_init>:
 * Returns:  none
 **********************************************************************/
void SEG_init(void)
{
    /* Configuration of SSD signals */
    GPIO_config_output(&DDRD, SEG_LATCH);
 102:	64 e0       	ldi	r22, 0x04	; 4
 104:	8a e2       	ldi	r24, 0x2A	; 42
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
    GPIO_config_output(&DDRD, SEG_CLK);
 10c:	67 e0       	ldi	r22, 0x07	; 7
 10e:	8a e2       	ldi	r24, 0x2A	; 42
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
    GPIO_config_output(&DDRB, SEG_DATA);
 116:	60 e0       	ldi	r22, 0x00	; 0
 118:	84 e2       	ldi	r24, 0x24	; 36
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
 120:	08 95       	ret

00000122 <SEG_update_shift_regs>:
 *           position - Position of the display where the segments are to 
 *                      be displayed (p3 p2 p1 p0 xxxx, active high)
 * Returns:  none
 **********************************************************************/
void SEG_update_shift_regs(uint8_t segments, uint8_t position)
{
 122:	1f 93       	push	r17
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	18 2f       	mov	r17, r24
 12a:	d6 2f       	mov	r29, r22
    uint8_t bit_number;

    // Pull LATCH, CLK, and DATA low
    GPIO_write_low(&PORTD, SEG_LATCH);
 12c:	64 e0       	ldi	r22, 0x04	; 4
 12e:	8b e2       	ldi	r24, 0x2B	; 43
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
    GPIO_write_low(&PORTD, SEG_CLK);
 136:	67 e0       	ldi	r22, 0x07	; 7
 138:	8b e2       	ldi	r24, 0x2B	; 43
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
    GPIO_write_low(&PORTB, SEG_DATA);
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	85 e2       	ldi	r24, 0x25	; 37
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14a:	85 e0       	ldi	r24, 0x05	; 5
 14c:	8a 95       	dec	r24
 14e:	f1 f7       	brne	.-4      	; 0x14c <SEG_update_shift_regs+0x2a>
 150:	00 00       	nop
 152:	c8 e0       	ldi	r28, 0x08	; 8
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "segments" by & (faster) or % (slower) and... 
        // ...output DATA value
        if ((segments & 0b00000001) == 0)
 154:	10 fd       	sbrc	r17, 0
 156:	06 c0       	rjmp	.+12     	; 0x164 <SEG_update_shift_regs+0x42>
        
        GPIO_write_low(&PORTB, SEG_DATA);
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	85 e2       	ldi	r24, 0x25	; 37
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
 162:	05 c0       	rjmp	.+10     	; 0x16e <SEG_update_shift_regs+0x4c>
        
        else
        
        GPIO_write_high(&PORTB, SEG_DATA);
 164:	60 e0       	ldi	r22, 0x00	; 0
 166:	85 e2       	ldi	r24, 0x25	; 37
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 16e:	85 e0       	ldi	r24, 0x05	; 5
 170:	8a 95       	dec	r24
 172:	f1 f7       	brne	.-4      	; 0x170 <SEG_update_shift_regs+0x4e>
 174:	00 00       	nop
        // Wait 1 us
        _delay_us(1);
        // Pull CLK high
        GPIO_write_high(&PORTD, SEG_CLK);
 176:	67 e0       	ldi	r22, 0x07	; 7
 178:	8b e2       	ldi	r24, 0x2B	; 43
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 180:	85 e0       	ldi	r24, 0x05	; 5
 182:	8a 95       	dec	r24
 184:	f1 f7       	brne	.-4      	; 0x182 <SEG_update_shift_regs+0x60>
 186:	00 00       	nop
        // Wait 1 us
        _delay_us(1);
        // Pull CLK low
        GPIO_write_low(&PORTD, SEG_CLK);
 188:	67 e0       	ldi	r22, 0x07	; 7
 18a:	8b e2       	ldi	r24, 0x2B	; 43
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
        // Shift "segments"
        segments = segments >> 1;
 192:	16 95       	lsr	r17
 194:	c1 50       	subi	r28, 0x01	; 1
    GPIO_write_low(&PORTB, SEG_DATA);
    // Wait 1 us
    _delay_us(1);
    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 196:	f1 f6       	brne	.-68     	; 0x154 <SEG_update_shift_regs+0x32>
 198:	c8 e0       	ldi	r28, 0x08	; 8
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "position" by & (faster) or % (slower) and... 
        // ...output DATA value
        if ((position & 0b00000001) == 0)
 19a:	d0 fd       	sbrc	r29, 0
 19c:	06 c0       	rjmp	.+12     	; 0x1aa <SEG_update_shift_regs+0x88>
        
        GPIO_write_low(&PORTB, SEG_DATA);
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	85 e2       	ldi	r24, 0x25	; 37
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
 1a8:	05 c0       	rjmp	.+10     	; 0x1b4 <SEG_update_shift_regs+0x92>
        
        else
        
        GPIO_write_high(&PORTB, SEG_DATA);
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	85 e2       	ldi	r24, 0x25	; 37
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 1b4:	85 e0       	ldi	r24, 0x05	; 5
 1b6:	8a 95       	dec	r24
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <SEG_update_shift_regs+0x94>
 1ba:	00 00       	nop
        // Wait 1 us
        _delay_us(1);
        // Pull CLK high
        GPIO_write_high(&PORTD, SEG_CLK);
 1bc:	67 e0       	ldi	r22, 0x07	; 7
 1be:	8b e2       	ldi	r24, 0x2B	; 43
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 1c6:	85 e0       	ldi	r24, 0x05	; 5
 1c8:	8a 95       	dec	r24
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <SEG_update_shift_regs+0xa6>
 1cc:	00 00       	nop
        // Wait 1 us
        _delay_us(1);
        // Pull CLK low
        GPIO_write_low(&PORTD, SEG_CLK);
 1ce:	67 e0       	ldi	r22, 0x07	; 7
 1d0:	8b e2       	ldi	r24, 0x2B	; 43
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
        // Shift "position"
        position = position >> 1;
 1d8:	d6 95       	lsr	r29
 1da:	c1 50       	subi	r28, 0x01	; 1
        segments = segments >> 1;
    }

    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 1dc:	f1 f6       	brne	.-68     	; 0x19a <SEG_update_shift_regs+0x78>
        // Shift "position"
        position = position >> 1;
    }

    // Pull LATCH high
    GPIO_write_high(&PORTD, SEG_LATCH);
 1de:	64 e0       	ldi	r22, 0x04	; 4
 1e0:	8b e2       	ldi	r24, 0x2B	; 43
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 1e8:	85 e0       	ldi	r24, 0x05	; 5
 1ea:	8a 95       	dec	r24
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <SEG_update_shift_regs+0xc8>
 1ee:	00 00       	nop
    // Wait 1 us
    _delay_us(1);
}
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	1f 91       	pop	r17
 1f6:	08 95       	ret

000001f8 <_exit>:
 1f8:	f8 94       	cli

000001fa <__stop_program>:
 1fa:	ff cf       	rjmp	.-2      	; 0x1fa <__stop_program>
